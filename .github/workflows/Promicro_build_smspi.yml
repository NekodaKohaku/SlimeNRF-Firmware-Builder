name: Build SlimeNRF (smSPI)

on:
  workflow_dispatch:

# Allow one concurrent deployment
concurrency:
  group: ${{ github.workflow }}-${{ github.ref }}
  cancel-in-progress: true

permissions: write-all

jobs:
  build:
    continue-on-error: true
    strategy:
      fail-fast: false
      matrix:
        boards: [
          # --- smSPI (no mag) ---
          {boardname: "promicro_uf2/nrf52840/smspi", clk: "disabled", type: "tracker", extraaction: "enabled", fileformat: "uf2", filename: "SlimeNRF_Tracker_smSPI_Mag_ProMicro",             magnetometer: "enabled",  sleep: "enabled",  sw0: "disabled"}
        ]
    if: always()
    runs-on: ubuntu-latest
    steps:

      - name: üíª Acquire code
        if: always()
        uses: actions/checkout@v5

      - name: üìù Put commit hash/name in env variables
        run: |
          echo "GIT_HASH=$(git rev-parse --short=8 HEAD)" >> $GITHUB_ENV
          echo "GIT_MESSAGE<<EOF" >> $GITHUB_ENV
          git log -1 --pretty=%B >> $GITHUB_ENV
          echo "EOF" >> $GITHUB_ENV

      - name: üßπ Clean Landing Site
        run: |
          sudo rm -rf zephyr-workspace/SlimeNRF-CI
      - uses: actions/checkout@v5
        with:
          path: zephyr-workspace/SlimeNRF-CI

      - name: üß∞ Install Dependencies + West
        run: |
          sudo apt-get update && sudo apt install --no-install-recommends \
          git \
          cmake \
          ninja-build \
          gperf \
          ccache \
          dfu-util \
          device-tree-compiler \
          wget \
          python3-dev \
          python3-pip \
          python3-setuptools \
          python3-tk \
          python3-wheel \
          python3-venv \
          xz-utils \
          file \
          make \
          gcc \
          gcc-multilib \
          g++-multilib \
          libsdl2-dev \
          libmagic1

          python3 -m venv ~/.venv
          source ~/.venv/bin/activate
          echo "PATH=$PATH" >> $GITHUB_ENV
          pip3 install west ninja

      - name: ü™Å Install Zephyr SDK
        run: |
          wget -q https://github.com/zephyrproject-rtos/sdk-ng/releases/download/v0.17.2/zephyr-sdk-0.17.2_linux-x86_64_minimal.tar.xz
          tar xf zephyr-sdk-0.17.2_linux-x86_64_minimal.tar.xz -C ~/
          ~/zephyr-sdk-0.17.2/setup.sh -c -t arm-zephyr-eabi

      - name: ‚ôªÔ∏è Initialize Zephyr Workspace
        run: |
          cd zephyr-workspace
          sudo rm -rf .west
          west init -l SlimeNRF-CI
          west update --narrow -o=--depth=1
          west zephyr-export

      - name: üêç Install Python Dependencies
        run: |
          cd zephyr-workspace
          pip3 install -r zephyr/scripts/requirements.txt

      - name: üîß Preparing Build Environment
        if: always()
        run: |
          cd zephyr-workspace
          sudo rm -rf Releases
          mkdir Releases

      # Receiver step will be skipped because no 'receiver' entries remain
      - name: üî® Build SlimeVR-Tracker-nRF - ${{ matrix.boards.boardname }}
        if: ${{ (matrix.boards.type == 'tracker') && (!contains(matrix.boards.filename, 'Stacked')) }}
        run: |
          cd zephyr-workspace
          sudo rm -rf SlimeVR-Tracker-nRF/build
          mkdir SlimeVR-Tracker-nRF/build

          west build \
              --board ${{ matrix.boards.boardname }} \
              --pristine=always SlimeVR-Tracker-nRF \
              --build-dir SlimeVR-Tracker-nRF/build \
              -- \
              -DNCS_TOOLCHAIN_VERSION=NONE \
              -DBOARD_ROOT=../SlimeVR-Tracker-nRF

          mv SlimeVR-Tracker-nRF/build/SlimeVR-Tracker-nRF/zephyr/zephyr.${{ matrix.boards.fileformat }} Releases/${{ matrix.boards.filename }}.${{ matrix.boards.fileformat }}

      - name: üíæ Upload Artifact - ${{ matrix.boards.boardname }}
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: ${{ matrix.boards.filename }}.${{ matrix.boards.fileformat }}
          path: zephyr-workspace/Releases/${{ matrix.boards.filename }}.${{ matrix.boards.fileformat }}

      - name: üìÅ Create/Update Github Release
        if: always()
        uses: mini-bomba/create-github-release@v1.2.0
        with:
          token: ${{ secrets.gh_token }}
          tag: "latest"
          prerelease: false
          name: "Latest Firmware"
          body: |
            Successful build of the latest SlimeNRF Firmware. (Automated)
          files: |
            zephyr-workspace/Releases/${{ matrix.boards.filename }}.${{ matrix.boards.fileformat }}
          clear_attachments: false
