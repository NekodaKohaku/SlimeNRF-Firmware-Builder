name: Build SlimeNRF Tracker (smSPI)

on:
  workflow_dispatch:

concurrency:
  group: ${{ github.workflow }}-${{ github.ref }}
  cancel-in-progress: true

permissions: write-all

jobs:
  build:
    runs-on: ubuntu-latest

    env:
      BOARD_PREFIX: "promicro_uf2/nrf52840/"
      FILENAME_PREFIX: "SlimeNRF_Tracker_"
      FILEFORMAT: "uf2"

      # 使用哪個 SPI 控制器（要換就改成 spi2 等）
      SPI_LABEL: "spi3"

      # --- ピン設定 ---
      # SPI
      MISO: "P0.22"
      MOSI: "P0.20"
      SCK:  "P0.17"
      CS:   "P0.24"
      # I2C
      SDA:  "P1.13"
      SCL:  "P1.15"
      # 汎用
      PWM0: "P0.15"
      SW0:  "P1.00"
      LED:  "P0.15"
      CLK:  "P1.11"
      INT:  "P0.02"
      VCC:  "P0.31"

      # --- 機能スイッチ ---
      MAGNETOMETER: "enabled"
      SLEEP:        "disabled"
      SENSOR_CLOCK: "enabled"
      EXTRA_ACTIONS: "disabled"
      SW0_BUTTON:   "disabled"

      # Release 是否附上 smspi 的 DTS 原檔方便檢查
      ATTACH_SMSPI_DTS: "enabled"

    steps:
      - name: Acquire code (root)
        uses: actions/checkout@v5

      - name: Put commit hash/name in env variables
        run: |
          echo "GIT_HASH=$(git rev-parse --short=8 HEAD)" >> $GITHUB_ENV
          echo "GIT_MESSAGE<<EOF" >> $GITHUB_ENV
          git log -1 --pretty=%B >> $GITHUB_ENV
          echo "EOF" >> $GITHUB_ENV

      - name: Clean landing site
        run: sudo rm -rf zephyr-workspace/SlimeNRF-CI

      - name: Acquire code (manifest at zephyr-workspace/SlimeNRF-CI)
        uses: actions/checkout@v5
        with:
          path: zephyr-workspace/SlimeNRF-CI

      - name: Install Dependencies + West
        run: |
          sudo apt-get update && sudo apt install --no-install-recommends \
            git cmake ninja-build gperf ccache dfu-util device-tree-compiler \
            wget python3-dev python3-pip python3-setuptools python3-tk \
            python3-wheel python3-venv xz-utils file make gcc gcc-multilib \
            g++-multilib libsdl2-dev libmagic1
          python3 -m venv ~/.venv
          source ~/.venv/bin/activate
          echo "PATH=$PATH" >> $GITHUB_ENV
          pip3 install west ninja

      - name: Install Zephyr SDK
        run: |
          wget -q https://github.com/zephyrproject-rtos/sdk-ng/releases/download/v0.17.2/zephyr-sdk-0.17.2_linux-x86_64_minimal.tar.xz
          tar xf zephyr-sdk-0.17.2_linux-x86_64_minimal.tar.xz -C ~/
          ~/zephyr-sdk-0.17.2/setup.sh -c -t arm-zephyr-eabi

      - name: Initialize Zephyr Workspace
        run: |
          cd zephyr-workspace
          rm -rf .west
          west init -l SlimeNRF-CI
          west update --narrow -o=--depth=1
          west zephyr-export

      - name: Install Zephyr Python requirements
        run: |
          cd zephyr-workspace
          source ~/.venv/bin/activate
          pip3 install -r zephyr/scripts/requirements.txt
          python -c "import elftools.elf.elffile, yaml; print('Zephyr Python deps OK')"

      - name: Preparing Build Environment
        run: |
          cd zephyr-workspace
          rm -rf Releases
          mkdir Releases

      - name: Derive names (SMSPI)
        run: |
          echo "BOARD=${BOARD_PREFIX}smspi" >> $GITHUB_ENV
          echo "OUTPUT_NAME=${FILENAME_PREFIX}SMSPI_ProMicro" >> $GITHUB_ENV

      - name: Force UF2 output (Kconfig)
        run: |
          cd zephyr-workspace
          printf "\nCONFIG_BUILD_OUTPUT_UF2=y" >> SlimeVR-Tracker-nRF/prj.conf

      - name: Sanity check workspace + list boards
        run: |
          cd zephyr-workspace/SlimeVR-Tracker-nRF/boards/nordic/promicro_uf2 || (echo "board dir missing"; exit 1)
          echo "== Files in boards/nordic/promicro_uf2 =="
          ls -la
          echo "== Look for promicro_uf2_smspi.dts =="
          test -f promicro_uf2_smspi.dts && echo "FOUND promicro_uf2_smspi.dts" || (echo "MISSING promicro_uf2_smspi.dts"; exit 1)
          cd ../../..
          echo "== west boards (first 200 lines) =="
          west boards | sed -n '1,200p' || true

      # === 核心：SPI + I2C + user pins 覆寫（含 smspi 變體）===
      - name: Apply pin mapping to DTS (SMSPI-aware + I2C)
        shell: bash
        run: |
          set -euo pipefail
          cd zephyr-workspace

          DTS_DIR="SlimeVR-Tracker-nRF/boards/nordic/promicro_uf2"
          BASE_DTS="$DTS_DIR/promicro_uf2.dts"
          VAR_DTS="$DTS_DIR/promicro_uf2_smspi.dts"

          parse_pin() {
            local s="$1" port pin
            if [[ $s =~ ^P?([01])\.([0-9]{1,2})$ ]]; then port="${BASH_REMATCH[1]}"; pin="${BASH_REMATCH[2]}";
            elif [[ $s =~ ^([0-9]{1,2})$ ]]; then port="0"; pin="${BASH_REMATCH[1]}";
            else echo "Invalid pin: $s" >&2; exit 1; fi
            pin=$((10#$pin)); echo "$port $pin"
          }

          # 解析所有腳位
          read MISO_PORT MISO_PIN < <(parse_pin "${MISO}")
          read MOSI_PORT MOSI_PIN < <(parse_pin "${MOSI}")
          read  SCK_PORT  SCK_PIN < <(parse_pin "${SCK}")
          read   CS_PORT   CS_PIN < <(parse_pin "${CS}")
          read  SDA_PORT  SDA_PIN < <(parse_pin "${SDA}")
          read  SCL_PORT  SCL_PIN < <(parse_pin "${SCL}")
          read PWM0_PORT PWM0_PIN < <(parse_pin "${PWM0}")
          read  SW0_PORT  SW0_PIN < <(parse_pin "${SW0}")
          read  LED_PORT  LED_PIN < <(parse_pin "${LED}")
          read  CLK_PORT  CLK_PIN < <(parse_pin "${CLK}")
          read  INT_PORT  INT_PIN < <(parse_pin "${INT}")
          read  VCC_PORT  VCC_PIN < <(parse_pin "${VCC}")

          for P in MISO MOSI SCK CS SDA SCL PWM0 SW0 LED CLK INT VCC; do
            eval port=\$${P}_PORT pin=\$${P}_PIN
            if [[ $port -eq 1 && $pin -gt 15 ]]; then echo "$P: Port 1 supports only 0..15"; exit 1; fi
          done

          # 和 Zephyr 的 board target 規則對齊的樣式（**這三個是之前漏掉的重點**）
          default_pat="^[[:space:]]*${SPI_LABEL}_default:[[:space:]]*${SPI_LABEL}_default[[:space:]]*\\{"
          sleep_pat="^[[:space:]]*${SPI_LABEL}_sleep:[[:space:]]*${SPI_LABEL}_sleep[[:space:]]*\\{"
          node_pat="^[[:space:]]*&${SPI_LABEL}[[:space:]]*\\{"

          # SPI pinctrl（只改 BASE_DTS，pinctrl 定義在這）
          if grep -qE "${default_pat}" "$BASE_DTS"; then
            sed -i -E "/${default_pat}/,/^[[:space:]]*\\};/ {/psels[[:space:]]*=/,/;/d}" "$BASE_DTS"
            sed -i -E "/${default_pat}/,/^[[:space:]]*\\};/ {/group1[[:space:]]*\\{/a\\
            \\t\\t\\tpsels = <NRF_PSEL(SPIM_MISO, ${MISO_PORT}, ${MISO_PIN})>, <NRF_PSEL(SPIM_MOSI, ${MOSI_PORT}, ${MOSI_PIN})>, <NRF_PSEL(SPIM_SCK, ${SCK_PORT}, ${SCK_PIN})>\\;
            }" "$BASE_DTS"
          fi
          if grep -qE "${sleep_pat}" "$BASE_DTS"; then
            sed -i -E "/${sleep_pat}/,/^[[:space:]]*\\};/ {/psels[[:space:]]*=/,/;/d}" "$BASE_DTS"
            sed -i -E "/${sleep_pat}/,/^[[:space:]]*\\};/ {/group1[[:space:]]*\\{/a\\
            \\t\\t\\tpsels = <NRF_PSEL(SPIM_MISO, ${MISO_PORT}, ${MISO_PIN})>, <NRF_PSEL(SPIM_MOSI, ${MOSI_PORT}, ${MOSI_PIN})>, <NRF_PSEL(SPIM_SCK, ${SCK_PORT}, ${SCK_PIN})>\\;
            }" "$BASE_DTS"
          fi

          # I2C pinctrl（在 BASE_DTS）
          if grep -qE "^[[:space:]]*i2c0_default:[[:space:]]*i2c0_default[[:space:]]*\\{" "$BASE_DTS"; then
            sed -i -E "/^[[:space:]]*i2c0_default:[[:space:]]*i2c0_default[[:space:]]*\\{/,/^[[:space:]]*\\};/ s#psels[[:space:]]*=.*#psels = <NRF_PSEL(TWIM_SDA, ${SDA_PORT}, ${SDA_PIN})>, <NRF_PSEL(TWIM_SCL, ${SCL_PORT}, ${SCL_PIN})>;#" "$BASE_DTS"
          fi
          if grep -qE "^[[:space:]]*i2c0_sleep:[[:space:]]*i2c0_sleep[[:space:]]*\\{" "$BASE_DTS"; then
            sed -i -E "/^[[:space:]]*i2c0_sleep:[[:space:]]*i2c0_sleep[[:space:]]*\\{/,/^[[:space:]]*\\};/ s#psels[[:space:]]*=.*#psels = <NRF_PSEL(TWIM_SDA, ${SDA_PORT}, ${SDA_PIN})>, <NRF_PSEL(TWIM_SCL, ${SCL_PORT}, ${SCL_PIN})>;#" "$BASE_DTS"
          fi

          # CS 改在 smspi 變體優先，否則回寫 base
          target_for_cs="$BASE_DTS"
          if [[ -f "$VAR_DTS" ]] && grep -qE "${node_pat}" "$VAR_DTS"; then
            target_for_cs="$VAR_DTS"
          fi
          sed -i -E "/${node_pat}/,/^[[:space:]]*\\};/ {/cs-gpios[[:space:]]*=/,/;/d}" "$target_for_cs" || true
          sed -i -E "/${node_pat}/{n; a\\
          \\tcs-gpios = <\\&gpio${CS_PORT} ${CS_PIN} GPIO_ACTIVE_LOW>\\;
          }" "$target_for_cs" || true

          # PWM0 pinctrl（在 BASE_DTS）
          sed -i -E \
            -e "/^[[:space:]]*pwm0_default:/,/^[[:space:]]*\\};/ s#psels[[:space:]]*=.*#psels = <NRF_PSEL(PWM_OUT0, ${PWM0_PORT}, ${PWM0_PIN})>;#" \
            -e "/^[[:space:]]*pwm0_sleep:/,  /^[[:space:]]*\\};/ s#psels[[:space:]]*=.*#psels = <NRF_PSEL(PWM_OUT0, ${PWM0_PORT}, ${PWM0_PIN})>;#" \
            "$BASE_DTS"

          # buttons / zephyr,user 兩檔都嘗試（節點存在才會動）
          for DTS in "$BASE_DTS" "$VAR_DTS"; do
            [[ -f "$DTS" ]] || continue
            sed -i -E "/^[[:space:]]*buttons[[:space:]]*\\{/,/^[[:space:]]*\\};/ s#(<&gpio)[01][[:space:]]+[0-9]+#\\1${SW0_PORT} ${SW0_PIN}#" "$DTS" || true
            sed -i -E "/^[[:space:]]*zephyr,user[[:space:]]*\\{/,/^[[:space:]]*\\};/ { \
              s#(led-gpios[[:space:]]*=<)[[:space:]]*&gpio[01][[:space:]]+[0-9]+#\\1\\&gpio${LED_PORT} ${LED_PIN}#; \
              s#//[[:space:]]*clk-gpios[[:space:]]*=.*#clk-gpios = <\\&gpio${CLK_PORT} ${CLK_PIN} GPIO_OPEN_DRAIN>;#; \
              s#(clk-gpios[[:space:]]*=<)[[:space:]]*&gpio[01][[:space:]]+[0-9]+#\\1\\&gpio${CLK_PORT} ${CLK_PIN}#; \
              s#(int0-gpios[[:space:]]*=<)[[:space:]]*&gpio[01][[:space:]]+[0-9]+#\\1\\&gpio${INT_PORT} ${INT_PIN}#; \
              s#(vcc-gpios[[:space:]]*=<)[[:space:]]*&gpio[01][[:space:]]+[0-9]+#\\1\\&gpio${VCC_PORT} ${VCC_PIN}#; \
            }" "$DTS" || true
          done

          echo "=== After patch summary ==="
          echo "[BASE_DTS] $BASE_DTS"
          grep -nE "${SPI_LABEL}_(default|sleep)|pwm0_(default|sleep)|i2c0_(default|sleep)" "$BASE_DTS" || true
          echo "[cs-gpios in BASE/VAR]"
          grep -nE "cs-gpios" "$BASE_DTS" "$VAR_DTS" 2>/dev/null || true
          echo "[user pins]"
          grep -nE "led-gpios|clk-gpios|int0-gpios|vcc-gpios" "$BASE_DTS" "$VAR_DTS" 2>/dev/null || true

      - name: External Sensor Clock toggle
        run: |
          cd zephyr-workspace
          if [[ "${SENSOR_CLOCK}" == "enabled" ]]; then
            sed -i "s|//[[:space:]]*clk-gpios|clk-gpios|g" SlimeVR-Tracker-nRF/boards/nordic/promicro_uf2/promicro_uf2*.dts
            echo "CONFIG_USE_SENSOR_CLOCK=y" >> SlimeVR-Tracker-nRF/prj.conf
          else
            sed -i "s|clk-gpios[[:space:]]*=|// clk-gpios =|g" SlimeVR-Tracker-nRF/boards/nordic/promicro_uf2/promicro_uf2*.dts
            echo "CONFIG_USE_SENSOR_CLOCK=n" >> SlimeVR-Tracker-nRF/prj.conf
          fi

      - name: Apply feature toggles
        run: |
          cd zephyr-workspace
          { [[ "${EXTRA_ACTIONS}" == "enabled" ]] && echo "CONFIG_USER_EXTRA_ACTIONS=y" || echo "CONFIG_USER_EXTRA_ACTIONS=n"; } >> SlimeVR-Tracker-nRF/prj.conf
          { [[ "${MAGNETOMETER}"  == "enabled" ]] && echo "CONFIG_SENSOR_USE_MAG=y"     || echo "CONFIG_SENSOR_USE_MAG=n"; }     >> SlimeVR-Tracker-nRF/prj.conf
          if [[ "${SLEEP}" == "enabled" ]]; then
            echo "CONFIG_USE_IMU_WAKE_UP=y" >> SlimeVR-Tracker-nRF/prj.conf
            echo "CONFIG_USE_ACTIVE_TIMEOUT=y" >> SlimeVR-Tracker-nRF/prj.conf
          else
            echo "CONFIG_USE_IMU_WAKE_UP=n" >> SlimeVR-Tracker-nRF/prj.conf
            echo "CONFIG_USE_ACTIVE_TIMEOUT=n" >> SlimeVR-Tracker-nRF/prj.conf
            echo "CONFIG_SENSOR_LP_TIMEOUT=300000" >> SlimeVR-Tracker-nRF/prj.conf
            echo "CONFIG_SENSOR_USE_LOW_POWER_2=n" >> SlimeVR-Tracker-nRF/prj.conf
          fi
          if [[ "${SW0_BUTTON}" == "enabled" ]]; then
            sed -i "s|//[[:space:]]*sw0[[:space:]]*=|sw0 =|g" SlimeVR-Tracker-nRF/boards/nordic/promicro_uf2/promicro_uf2*.dts
          else
            sed -i "s|sw0[[:space:]]*=|// sw0 =|g" SlimeVR-Tracker-nRF/boards/nordic/promicro_uf2/promicro_uf2*.dts
          fi

      - name: Build SlimeVR-Tracker-nRF (SMSPI)
        run: |
          cd zephyr-workspace
          rm -rf SlimeVR-Tracker-nRF/build
          mkdir -p SlimeVR-Tracker-nRF/build
          west build \
            --board "$BOARD" \
            --pristine=always SlimeVR-Tracker-nRF \
            --build-dir SlimeVR-Tracker-nRF/build \
            -- \
            -DNCS_TOOLCHAIN_VERSION=NONE \
            -DBOARD_ROOT=../SlimeVR-Tracker-nRF

          SRC1="SlimeVR-Tracker-nRF/build/SlimeVR-Tracker-nRF/zephyr/zephyr.${FILEFORMAT}"
          SRC2="SlimeVR-Tracker-nRF/build/zephyr/zephyr.${FILEFORMAT}"
          if   [ -f "$SRC1" ]; then SRC="$SRC1";
          elif [ -f "$SRC2" ]; then SRC="$SRC2";
          else
            SRC=$(find SlimeVR-Tracker-nRF/build -type f -name "*.uf2" | head -n1)
          fi
          test -n "$SRC" -a -f "$SRC" || {
            echo "UF2 not found; listing possible outputs under build:"
            find SlimeVR-Tracker-nRF/build -maxdepth 6 -type f -name "zephyr.*" -printf "  %p\n"
            exit 1
          }
          mv "$SRC" "Releases/$OUTPUT_NAME.${FILEFORMAT}"

      - name: Upload Artifact
        uses: actions/upload-artifact@v4
        with:
          name: ${{ env.OUTPUT_NAME }}.${{ env.FILEFORMAT }}
          path: zephyr-workspace/Releases/${{ env.OUTPUT_NAME }}.${{ env.FILEFORMAT }}

      - name: Prepare release file list
        shell: bash
        run: |
          set -euo pipefail
          UF2_PATH="zephyr-workspace/Releases/${OUTPUT_NAME}.${FILEFORMAT}"
          DTS_DIR="zephyr-workspace/SlimeVR-Tracker-nRF/boards/nordic/promicro_uf2"
          SMSPI_DTS="$DTS_DIR/promicro_uf2_smspi.dts"
          {
            echo "RELEASE_FILES<<EOF"
            echo "${UF2_PATH}"
            if [[ "${ATTACH_SMSPI_DTS}" == "enabled" && -f "${SMSPI_DTS}" ]]; then
              echo "${SMSPI_DTS}"
            fi
            echo "EOF"
          } >> "$GITHUB_ENV"

      - name: Create/Update Github Release
        uses: mini-bomba/create-github-release@v1.2.0
        with:
          token: ${{ secrets.GITHUB_TOKEN }}
          tag: "latest"
          prerelease: false
          name: "Latest Firmware"
          body: |
            Manual build of the SlimeNRF Tracker Firmware.
            Board: ${{ env.BOARD }}
            Features:
              MAG=${{ env.MAGNETOMETER }}, SLEEP=${{ env.SLEEP }},
              CLOCK=${{ env.SENSOR_CLOCK }}, EXTRA=${{ env.EXTRA_ACTIONS }},
              SW0=${{ env.SW0_BUTTON }}
            Pins (SMSPI + I2C):
              MISO=${{ env.MISO }}, MOSI=${{ env.MOSI }}, SCK=${{ env.SCK }}, CS=${{ env.CS }}
              SDA=${{ env.SDA }}, SCL=${{ env.SCL }}
              PWM0=${{ env.PWM0 }}, SW0=${{ env.SW0 }}
              LED=${{ env.LED }}, CLK=${{ env.CLK }}
              INT=${{ env.INT }}, VCC=${{ env.VCC }}
          files: |
            ${{ env.RELEASE_FILES }}
          clear_attachments: true
