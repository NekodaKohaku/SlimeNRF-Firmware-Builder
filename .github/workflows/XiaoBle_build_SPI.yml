name: Build XiaoBle Tracker (SPI)

on:
  workflow_dispatch:

concurrency:
  group: ${{ github.workflow }}-${{ github.ref }}
  cancel-in-progress: true

permissions: write-all

jobs:
  build:
    strategy:
      fail-fast: false
      matrix:
        boards:
          - boardname: "xiao_ble/nrf52840"
            type: "tracker"
            fileformat: "uf2"
            filename: "XiaoBle_SlimeNRF_Tracker"

    runs-on: ubuntu-latest

    # ‚úÖ „Åì„Åì„Åß„Äå„Éî„É≥ÈÖçÂàó„Äç„Å®„ÄåÊ©üËÉΩ„Çπ„Ç§„ÉÉ„ÉÅ„Äç„ÇíÂ§âÊõ¥„Åô„Çã
    env:
      # --- „Éî„É≥Ë®≠ÂÆö ---
      MISO: "P1.14"
      MOSI: "P1.15"
      SCK:  "P1.13"
      CS:   "P1.12"
      PWM0: "P0.15"
      SW0:  "P0.02"
      LED:  "P0.17"
      CLK:  "P0.28"
      INT:  "P0.03"
      VCC:  "P0.14"

      # --- Ê©üËÉΩ„Çπ„Ç§„ÉÉ„ÉÅ ---
      MAGNETOMETER: "enabled"
      SLEEP:        "disabled"
      SENSOR_CLOCK: "enabled"
      EXTRA_ACTIONS: "enabled"
      SW0_BUTTON:   "enabled"

    steps:
      - name: üíª Acquire code (root)
        uses: actions/checkout@v5

      - name: üìù Put commit hash/name in env variables
        shell: bash
        run: |
          echo "GIT_HASH=$(git rev-parse --short=8 HEAD)" >> $GITHUB_ENV
          {
            echo "GIT_MESSAGE<<EOF"
            git log -1 --pretty=%B
            echo "EOF"
          } >> $GITHUB_ENV

      - name: üßπ Clean landing folder for workspace repo
        shell: bash
        run: |
          rm -rf zephyr-workspace/SlimeNRF-CI

      - name: üíª Acquire code (workspace)
        uses: actions/checkout@v5
        with:
          path: zephyr-workspace/SlimeNRF-CI

      - name: üß∞ Install Dependencies + Python venv + West
        shell: bash
        run: |
          sudo apt-get update
          sudo apt-get install -y --no-install-recommends \
            git cmake ninja-build gperf ccache dfu-util device-tree-compiler wget \
            python3-dev python3-pip python3-setuptools python3-tk python3-wheel python3-venv \
            xz-utils file make gcc gcc-multilib g++-multilib libsdl2-dev libmagic1
          python3 -m venv "$HOME/.venv"
          "$HOME/.venv/bin/python" -m pip install --upgrade pip
          "$HOME/.venv/bin/python" -m pip install west ninja
          echo "$HOME/.venv/bin" >> "$GITHUB_PATH"

      - name: ü™Å Install Zephyr SDK
        shell: bash
        run: |
          wget -q https://github.com/zephyrproject-rtos/sdk-ng/releases/download/v0.17.2/zephyr-sdk-0.17.2_linux-x86_64_minimal.tar.xz
          tar xf zephyr-sdk-0.17.2_linux-x86_64_minimal.tar.xz -C "$HOME"/
          "$HOME/zephyr-sdk-0.17.2/setup.sh" -c -t arm-zephyr-eabi

      - name: ‚ôªÔ∏è Initialize Zephyr Workspace
        shell: bash
        run: |
          cd zephyr-workspace
          rm -rf .west
          west init -l SlimeNRF-CI
          west update --narrow -o=--depth=1
          west zephyr-export

      - name: üêç Install Python Dependencies
        shell: bash
        run: |
          cd zephyr-workspace
          python -m pip install -r zephyr/scripts/requirements.txt

      - name: üîß Derive build variables (env)
        shell: bash
        run: |
          echo "FILEFORMAT=${{ matrix.boards.fileformat }}" >> $GITHUB_ENV
          echo "BOARD=${{ matrix.boards.boardname }}" >> $GITHUB_ENV
          echo "OUTPUT_NAME=${{ matrix.boards.filename }}" >> $GITHUB_ENV

      - name: üóÇÔ∏è Prepare Releases folder
        shell: bash
        run: |
          cd zephyr-workspace
          rm -rf Releases
          mkdir -p Releases/dts

      - name: üì∏ Snapshot DTS BEFORE modifications
        if: ${{ matrix.boards.type == 'tracker' }}
        shell: bash
        run: |
          cd zephyr-workspace
          cp "SlimeVR-Tracker-nRF/boards/xiao_ble.overlay" "Releases/dts/xiao_ble.before.overlay" || true

      # === Áí∞Â¢ÉÂ§âÊï∞„Åß SPI/GPIO „Çí‰∏äÊõ∏„ÅçÔºà&spi3 „ÅØ spi2_default/sleep „ÇíÂèÇÁÖßÔºâ ===
      - name: ‚úçÔ∏è Apply SPI & GPIO pin mapping (override spi2_* states)
        if: ${{ matrix.boards.type == 'tracker' }}
        shell: bash
        run: |
          set -euo pipefail
          cd zephyr-workspace
          python - <<'PY'
          import os, re, pathlib, sys

          p = pathlib.Path("SlimeVR-Tracker-nRF/boards/xiao_ble.overlay")
          s = p.read_text()

          def parse_pin(v: str):
            v = v.strip().upper().replace('P','')
            port, pin = (v.split('.',1) if '.' in v else ('0', v))
            port, pin = int(port), int(pin)
            if port not in (0,1): sys.exit(f"‰∏çÊ≠£„Å™„Éù„Éº„Éà P{port}")
            if port == 1 and not (0 <= pin <= 15): sys.exit("Port 1 „ÅØ 0..15 „ÅÆ„ÅøÂØæÂøú")
            if not (0 <= pin <= 31): sys.exit("„Éî„É≥Áï™Âè∑„ÅØ 0..31")
            return port, pin

          E=os.environ
          SCK  = parse_pin(E["SCK"]);  MOSI = parse_pin(E["MOSI"]); MISO = parse_pin(E["MISO"])
          CS   = parse_pin(E["CS"]);   PWM0 = parse_pin(E["PWM0"]); LED  = parse_pin(E["LED"])
          INT0 = parse_pin(E["INT"]);  CLK  = parse_pin(E["CLK"]);  VCC  = parse_pin(E["VCC"])
          SW0  = parse_pin(E["SW0"])

          block = f"""
          &spi2_default {{
            group1 {{
              /* SCK/MOSI/MISO */
              psels = <NRF_PSEL(SPIM_SCK,  {SCK[0]},  {SCK[1]})>,
                      <NRF_PSEL(SPIM_MOSI, {MOSI[0]}, {MOSI[1]})>,
                      <NRF_PSEL(SPIM_MISO, {MISO[0]}, {MISO[1]})>;
            }};
          }};
          &spi2_sleep {{
            group1 {{
              psels = <NRF_PSEL(SPIM_SCK,  {SCK[0]},  {SCK[1]})>,
                      <NRF_PSEL(SPIM_MOSI, {MOSI[0]}, {MOSI[1]})>,
                      <NRF_PSEL(SPIM_MISO, {MISO[0]}, {MISO[1]})>;
              low-power-enable;
            }};
          }};
          """
          if not s.endswith("\n"): s += "\n"
          s += block + "\n"

          def patch_spi3(src: str) -> str:
            src = (re.sub(r'^\s*pinctrl-0\s*=\s*<[^;]+>;\s*', '\t\tpinctrl-0 = <&spi2_default>;\n', src, flags=re.M)
                   if re.search(r'^\s*pinctrl-0\s*=', src, flags=re.M)
                   else '\t\tpinctrl-0 = <&spi2_default>;\n' + src)
            src = (re.sub(r'^\s*pinctrl-1\s*=\s*<[^;]+>;\s*', '\t\tpinctrl-1 = <&spi2_sleep>;\n', src, flags=re.M)
                   if re.search(r'^\s*pinctrl-1\s*=', src, flags=re.M)
                   else '\t\tpinctrl-1 = <&spi2_sleep>;\n' + src)
            if not re.search(r'^\s*pinctrl-names\s*=\s*".*default.*".*".*sleep.*"', src, flags=re.M):
              src = '\t\tpinctrl-names = "default", "sleep";\n' + src
            if re.search(r'^\s*cs-gpios\s*=', src, flags=re.M):
              src = re.sub(
                r'(^\s*cs-gpios\s*=\s*<\s*&gpio)[01]\s+\d+\s+(?:GPIO_[A-Z_]+|0x[0-9a-fA-F]+)(\s*>;\s*)',
                lambda m: f"{m.group(1)}{CS[0]} {CS[1]} GPIO_ACTIVE_LOW{m.group(2)}",
                src, flags=re.M
              )
            else:
              src = '\t\tcs-gpios = <&gpio{} {} GPIO_ACTIVE_LOW>;\n'.format(CS[0], CS[1]) + src
            return src

          s = re.sub(r'(&spi3\s*\{)(.*?)(\n\};)', lambda m: m.group(1)+patch_spi3(m.group(2))+m.group(3), s, flags=re.S)
          s = re.sub(r'(NRF_PSEL\s*\(\s*PWM_OUT0\s*,\s*)[01]\s*,\s*\d+(\s*\))',
                     lambda m: f"{m.group(1)}{PWM0[0]}, {PWM0[1]}{m.group(2)}", s)

          def set_prop(src, prop, port, pin, flags_text):
            rx = re.compile(rf'({prop}\s*=\s*)<[^>]*>(\s*;\s*)')
            if rx.search(src):
              return rx.sub(lambda m: f"{m.group(1)}<&gpio{port} {pin}{flags_text}>{m.group(2)}", src)
            uz = re.compile(r"(zephyr,user\s*\{)(.*?)(\n\t*\};)", re.S)
            return uz.sub(lambda m: f"{m.group(1)}{m.group(2)}\n\t\t{prop} = <&gpio{port} {pin}{flags_text}>;{m.group(3)}", src)

          s = set_prop(s, "led-gpios",  LED[0],  LED[1],  " (GPIO_OPEN_DRAIN|GPIO_ACTIVE_LOW)")
          s = set_prop(s, "int0-gpios", INT0[0], INT0[1], " 0")
          s = set_prop(s, "vcc-gpios",  VCC[0],  VCC[1],  " 0")
          s = re.sub(r'(^\s*//\s*clk-gpios\s*=\s*<\s*&gpio)[01]\s+\d+([^>]*>;\s*)',
                     lambda m: f"{m.group(1)}{CLK[0]} {CLK[1]}{m.group(2)}", s, flags=re.M)
          s = re.sub(r'(^\s*clk-gpios\s*=\s*<\s*&gpio)[01]\s+\d+([^>]*>;\s*)',
                     lambda m: f"{m.group(1)}{CLK[0]} {CLK[1]}{m.group(2)}", s, flags=re.M)
          s = re.sub(r'(button_0\s*\{[^{}]*?gpios\s*=\s*)<[^>]*>(\s*;)',
                     lambda m: f'{m.group(1)}<&gpio{SW0[0]} {SW0[1]} 0x11>{m.group(2)}', s, flags=re.S)
          p.write_text(s)
          PY

      - name: üîß External Sensor Clock
        shell: bash
        run: |
          cd zephyr-workspace
          if [[ "${SENSOR_CLOCK}" == "enabled" ]]; then
            sed -i "s#^[[:space:]]*//[[:space:]]*clk-gpios#\t\tclk-gpios#g" SlimeVR-Tracker-nRF/boards/xiao_ble.overlay
            printf "\nCONFIG_USE_SENSOR_CLOCK=y\n" >> SlimeVR-Tracker-nRF/prj.conf
          else
            sed -i "s#^\([[:space:]]*\)clk-gpios[[:space:]]*=#\1// clk-gpios =#g" SlimeVR-Tracker-nRF/boards/xiao_ble.overlay
            printf "\nCONFIG_USE_SENSOR_CLOCK=n\n" >> SlimeVR-Tracker-nRF/prj.conf
          fi

      - name: üîß Extra Actions
        shell: bash
        run: |
          cd zephyr-workspace
          if [[ "${EXTRA_ACTIONS}" == "enabled" ]]; then
            printf "\nCONFIG_USER_EXTRA_ACTIONS=y\n" >> SlimeVR-Tracker-nRF/prj.conf
          else
            printf "\nCONFIG_USER_EXTRA_ACTIONS=n\n" >> SlimeVR-Tracker-nRF/prj.conf
          fi

      - name: üîß Magnetometer
        shell: bash
        run: |
          cd zephyr-workspace
          if [[ "${MAGNETOMETER}" == "enabled" ]]; then
            printf "\nCONFIG_SENSOR_USE_MAG=y\n" >> SlimeVR-Tracker-nRF/prj.conf
          else
            printf "\nCONFIG_SENSOR_USE_MAG=n\n" >> SlimeVR-Tracker-nRF/prj.conf
          fi

      - name: üîß Sleep
        shell: bash
        run: |
          cd zephyr-workspace
          if [[ "${SLEEP}" == "enabled" ]]; then
            printf "\nCONFIG_USE_IMU_WAKE_UP=y\nCONFIG_USE_ACTIVE_TIMEOUT=y\n" >> SlimeVR-Tracker-nRF/prj.conf
          else
            {
              printf "\nCONFIG_USE_IMU_WAKE_UP=n\n"
              printf "CONFIG_USE_ACTIVE_TIMEOUT=n\n"
              printf "CONFIG_SENSOR_LP_TIMEOUT=300000\n"
              printf "CONFIG_SENSOR_USE_LOW_POWER_2=n\n"
            } >> SlimeVR-Tracker-nRF/prj.conf
          fi

      - name: üîß SW0 Button (comment/uncomment helper)
        shell: bash
        run: |
          cd zephyr-workspace
          if [[ "${SW0_BUTTON}" == "enabled" ]]; then
            sed -i "s#^[[:space:]]*//[[:space:]]*sw0[[:space:]]*=#\t\tsw0 =#g" SlimeVR-Tracker-nRF/boards/xiao_ble.overlay || true
          else
            sed -i "s#^\([[:space:]]*\)sw0[[:space:]]*=#\1// sw0 =#g" SlimeVR-Tracker-nRF/boards/xiao_ble.overlay || true
          fi

      - name: üî® Build SlimeVR-Tracker-nRF - ${{ matrix.boards.boardname }}
        if: ${{ matrix.boards.type == 'tracker' }}
        shell: bash
        run: |
          cd zephyr-workspace
          rm -rf SlimeVR-Tracker-nRF/build
          mkdir -p SlimeVR-Tracker-nRF/build
          west build \
            --board "${BOARD}" \
            --pristine=always SlimeVR-Tracker-nRF \
            --build-dir SlimeVR-Tracker-nRF/build \
            -- \
            -DNCS_TOOLCHAIN_VERSION=NONE \
            -DBOARD_ROOT=../SlimeVR-Tracker-nRF
          mv "SlimeVR-Tracker-nRF/build/SlimeVR-Tracker-nRF/zephyr/zephyr.${FILEFORMAT}" \
             "Releases/${OUTPUT_NAME}.${FILEFORMAT}"

      - name: Collect DTS (before/after) & Diff, then Package
        shell: bash
        run: |
          set -euo pipefail
          cd zephyr-workspace

          DTS_MAIN="SlimeVR-Tracker-nRF/boards/xiao_ble.overlay"

          cp "$DTS_MAIN"  "Releases/dts/xiao_ble.after.overlay" || true

          if [[ -f "Releases/dts/xiao_ble.before.overlay" && -f "Releases/dts/xiao_ble.after.overlay" ]]; then
            diff -u "Releases/dts/xiao_ble.before.overlay" "Releases/dts/xiao_ble.after.overlay" > "Releases/dts/xiao_ble.pins.diff" || true
          else
            echo "WARN: xiao_ble.before.overlay not found, skipping diff"
          fi

          if [[ -f "SlimeVR-Tracker-nRF/build/SlimeVR-Tracker-nRF/zephyr/zephyr.dts" ]]; then
            cp "SlimeVR-Tracker-nRF/build/SlimeVR-Tracker-nRF/zephyr/zephyr.dts" "Releases/dts/zephyr.final.dts"
          fi

          tar -czf "Releases/${OUTPUT_NAME}_DTS.tgz" -C Releases dts
          ls -la Releases

      - name: Upload Artifact (UF2)
        uses: actions/upload-artifact@v4
        with:
          name: ${{ env.OUTPUT_NAME }}.${{ env.FILEFORMAT }}
          path: zephyr-workspace/Releases/${{ env.OUTPUT_NAME }}.${{ env.FILEFORMAT }}

      - name: Upload Artifact (DTS package)
        uses: actions/upload-artifact@v4
        with:
          name: ${{ env.OUTPUT_NAME }}_DTS.tgz
          path: zephyr-workspace/Releases/${{ env.OUTPUT_NAME }}_DTS.tgz

      - name: Create/Update Github Release
        uses: mini-bomba/create-github-release@v1.2.0
        with:
          token: ${{ secrets.GITHUB_TOKEN }}
          tag: "latest"
          prerelease: false
          name: "Latest Firmware"
          body: |
            Manual build of the SlimeNRF Tracker Firmware (XIAO BLE).

            Commit: ${{ env.GIT_HASH }}
            Message:
            ${{ env.GIT_MESSAGE }}

            Board: ${{ env.BOARD }}

            Pins:
              SCK=${{ env.SCK }}, MOSI=${{ env.MOSI }}, MISO=${{ env.MISO }}, CS=${{ env.CS }}
              PWM0=${{ env.PWM0 }}, LED=${{ env.LED }}, INT=${{ env.INT }}, CLK=${{ env.CLK }}, VCC=${{ env.VCC }}, SW0=${{ env.SW0 }}

            Features:
              MAG=${{ env.MAGNETOMETER }}, SLEEP=${{ env.SLEEP }},
              CLOCK=${{ env.SENSOR_CLOCK }}, EXTRA=${{ env.EXTRA_ACTIONS }},
              SW0=${{ env.SW0_BUTTON }}

            DTS artifacts:
              - xiao_ble.before.overlay / xiao_ble.after.overlay
              - xiao_ble.pins.diff (before vs after)
              - zephyr.final.dts (if present)
          files: |
            zephyr-workspace/Releases/${{ env.OUTPUT_NAME }}.${{ env.FILEFORMAT }}
            zephyr-workspace/Releases/${{ env.OUTPUT_NAME }}_DTS.tgz
          clear_attachments: true
