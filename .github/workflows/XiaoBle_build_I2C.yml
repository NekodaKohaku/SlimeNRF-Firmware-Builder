name: Build XiaoBle Tracker (XIAO BLE)

on:
  workflow_dispatch:

concurrency:
  group: ${{ github.workflow }}-${{ github.ref }}
  cancel-in-progress: true

permissions: write-all

jobs:
  build:
    runs-on: ubuntu-latest

    env:
      BOARD: "xiao_ble/nrf52840"
      OUTPUT_NAME: "SlimeNRF_Tracker_XIAO"
      FILEFORMAT: "uf2"

      # --- ピン設定---
      SDA: "P0.06"
      SCL: "P0.08"
      PWM0: "P0.15"
      LED: "P0.17"
      INT: "P0.03"
      VCC: "P0.14"
      CLK: "P0.28"

      # --- 機能スイッチ---
      MAGNETOMETER: "enabled"
      SLEEP:        "disabled"
      SENSOR_CLOCK: "enabled"
      EXTRA_ACTIONS: "enabled"
      SW0_BUTTON:   "disabled"

    steps:
      - name: Acquire code (root)
        uses: actions/checkout@v5

      - name: Put commit hash/name in env variables
        run: |
          echo "GIT_HASH=$(git rev-parse --short=8 HEAD)" >> $GITHUB_ENV
          echo "GIT_MESSAGE<<EOF" >> $GITHUB_ENV
          git log -1 --pretty=%B >> $GITHUB_ENV
          echo "EOF" >> $GITHUB_ENV

      - name: Clean Landing Site
        run: sudo rm -rf zephyr-workspace/SlimeNRF-CI

      - name: Acquire code (manifest at zephyr-workspace/SlimeNRF-CI)
        uses: actions/checkout@v5
        with:
          path: zephyr-workspace/SlimeNRF-CI

      - name: Install Dependencies + West
        run: |
          sudo apt-get update && sudo apt install --no-install-recommends \
            git cmake ninja-build gperf ccache dfu-util device-tree-compiler \
            wget python3-dev python3-pip python3-setuptools python3-tk \
            python3-wheel python3-venv xz-utils file make gcc gcc-multilib \
            g++-multilib libsdl2-dev libmagic1
          python3 -m venv ~/.venv
          source ~/.venv/bin/activate
          echo "PATH=$PATH" >> $GITHUB_ENV
          pip3 install west ninja

      - name: Install Zephyr SDK
        run: |
          wget -q https://github.com/zephyrproject-rtos/sdk-ng/releases/download/v0.17.2/zephyr-sdk-0.17.2_linux-x86_64_minimal.tar.xz
          tar xf zephyr-sdk-0.17.2_linux-x86_64_minimal.tar.xz -C ~/
          ~/zephyr-sdk-0.17.2/setup.sh -c -t arm-zephyr-eabi

      - name: Initialize Zephyr Workspace
        run: |
          cd zephyr-workspace
          rm -rf .west
          west init -l SlimeNRF-CI
          west update --narrow -o=--depth=1
          west zephyr-export

      - name: Install Zephyr Python requirements
        run: |
          cd zephyr-workspace
          source ~/.venv/bin/activate
          pip3 install -r zephyr/scripts/requirements.txt
          python -c "import elftools.elf.elffile, yaml; print('Zephyr Python deps OK')"

      - name: Preparing Build Environment
        run: |
          cd zephyr-workspace
          rm -rf Releases
          mkdir -p Releases/dts

      - name: Sanity check & snapshot overlay (before)
        run: |
          test -d "zephyr-workspace/SlimeVR-Tracker-nRF" || (echo "SlimeVR-Tracker-nRF missing"; exit 1)
          test -f "zephyr-workspace/SlimeVR-Tracker-nRF/boards/xiao_ble.overlay" || (echo "xiao_ble.overlay missing"; exit 1)
          cp zephyr-workspace/SlimeVR-Tracker-nRF/boards/xiao_ble.overlay zephyr-workspace/Releases/dts/xiao_ble.before.overlay

      - name: Apply pin mapping to xiao_ble.overlay
        shell: bash
        run: |
          set -euo pipefail
          cd zephyr-workspace
          python3 - <<'PY'
          import os, re, pathlib
          p = pathlib.Path("SlimeVR-Tracker-nRF/boards/xiao_ble.overlay")
          s = p.read_text()

          def parse_pin(v):
            v = v.strip().upper().replace('P','')
            if '.' in v: port, pin = v.split('.',1)
            else:        port, pin = ('0', v)
            port, pin = int(port), int(pin)
            if port not in (0,1): raise SystemExit(f"Invalid port P{port}")
            if port==1 and not (0 <= pin <= 15): raise SystemExit("Port 1 supports only 0..15")
            if not (0 <= pin <= 31): raise SystemExit("Pin must be 0..31")
            return port, pin

          # 允許並保留 'group1 {...};' 與外層 '};'
          def sub_state(s, state, sda, scl):
            pat = re.compile(rf"(&{state}\s*\{{\s*group1\s*\{{)(.*?)(\}}\s*;\s*\}}\s*;)", re.S)
            def repl(m):
              head, body, tail = m.groups()
              line = f"psels = <NRF_PSEL(TWIM_SDA, {sda[0]}, {sda[1]})>, <NRF_PSEL(TWIM_SCL, {scl[0]}, {scl[1]})>;"
              if re.search(r"\bpsels\s*=", body):
                body = re.sub(r"psels\s*=.*?;", line, body, flags=re.S)
              else:
                # 放到 group1{} 的最前面，後面保留原內容
                body = f"\n\t\t{line}\n" + body
              return head + body + tail
            return pat.sub(repl, s, count=1)

          def sub_pwm0(s, pwm0):
            return re.sub(r"(NRF_PSEL\s*\(\s*PWM_OUT0\s*,\s*)[01]\s*,\s*\d+(\s*\))",
                          rf"\g<1>{pwm0[0]}, {pwm0[1]}\g<2>", s)

          # 正確處理 zephyr,user 區塊並保留結尾 '};'
          def sub_prop(s, prop, port, pin, flags):
            if re.search(rf"\b{prop}\b", s):
              s = re.sub(
                rf"({prop}\s*=\s*<\s*&gpio)[01]\s+\d+([^>]*>;\s*)",
                rf"\g<1>{port} {pin}{flags}\g<2>",
                s,
                flags=re.S
              )
            else:
              pat = re.compile(r"(zephyr,user\s*\{)(.*?)(\};)", re.S)
              def repl(m):
                return f"{m.group(1)}{m.group(2)}\n\t\t{prop} = <&gpio{port} {pin}{flags}>;\n\t{m.group(3)}"
              s = pat.sub(repl, s, count=1)
            return s

          def sub_clk(s, port, pin):
            s = re.sub(
              r"(^\s*//\s*clk-gpios\s*=\s*<\s*&gpio)[01]\s+\d+([^>]*>;\s*)",
              rf"\g<1>{port} {pin}\g<2>", s, flags=re.M
            )
            s = re.sub(
              r"(^\s*clk-gpios\s*=\s*<\s*&gpio)[01]\s+\d+([^>]*>;\s*)",
              rf"\g<1>{port} {pin}\g<2>", s, flags=re.M
            )
            return s

          env = os.environ
          SDA = parse_pin(env["SDA"]); SCL = parse_pin(env["SCL"])
          PWM0= parse_pin(env["PWM0"]); LED = parse_pin(env["LED"])
          INT = parse_pin(env["INT"]);  VCC = parse_pin(env["VCC"])
          CLK = parse_pin(env["CLK"])

          s = sub_state(s, "i2c1_default", SDA, SCL)
          s = sub_state(s, "i2c1_sleep",   SDA, SCL)
          s = sub_pwm0(s, PWM0)
          s = sub_prop(s, "led-gpios", LED[0], LED[1], " (GPIO_OPEN_DRAIN|GPIO_ACTIVE_LOW)")
          s = sub_prop(s, "int0-gpios", INT[0], INT[1], " 0")
          s = sub_prop(s, "vcc-gpios",  VCC[0], VCC[1], " 0")
          s = sub_clk(s, CLK[0], CLK[1])

          p.write_text(s)
          print("Overlay pins updated.")
          PY

      - name: Enable External Sensor Clock
        if: env.SENSOR_CLOCK == 'enabled'
        run: |
          cd zephyr-workspace
          sed -i "s#^[[:space:]]*//[[:space:]]*clk-gpios#\t\tclk-gpios#g" SlimeVR-Tracker-nRF/boards/xiao_ble.overlay
          printf "\nCONFIG_USE_SENSOR_CLOCK=y" >> SlimeVR-Tracker-nRF/prj.conf

      - name: Disable External Sensor Clock
        if: env.SENSOR_CLOCK == 'disabled'
        run: |
          cd zephyr-workspace
          sed -i "s#^\([[:space:]]*\)clk-gpios[[:space:]]*=#\1// clk-gpios =#g" SlimeVR-Tracker-nRF/boards/xiao_ble.overlay
          printf "\nCONFIG_USE_SENSOR_CLOCK=n" >> SlimeVR-Tracker-nRF/prj.conf

      - name: Enable Extra Actions
        if: env.EXTRA_ACTIONS == 'enabled'
        run: |
          cd zephyr-workspace
          printf "\nCONFIG_USER_EXTRA_ACTIONS=y" >> SlimeVR-Tracker-nRF/prj.conf

      - name: Disable Extra Actions
        if: env.EXTRA_ACTIONS == 'disabled'
        run: |
          cd zephyr-workspace
          printf "\nCONFIG_USER_EXTRA_ACTIONS=n" >> SlimeVR-Tracker-nRF/prj.conf

      - name: Enable Magnetometer
        if: env.MAGNETOMETER == 'enabled'
        run: |
          cd zephyr-workspace
          printf "\nCONFIG_SENSOR_USE_MAG=y" >> SlimeVR-Tracker-nRF/prj.conf

      - name: Disable Magnetometer
        if: env.MAGNETOMETER == 'disabled'
        run: |
          cd zephyr-workspace
          printf "\nCONFIG_SENSOR_USE_MAG=n" >> SlimeVR-Tracker-nRF/prj.conf

      - name: Enable Sleep
        if: env.SLEEP == 'enabled'
        run: |
          cd zephyr-workspace
          printf "\nCONFIG_USE_IMU_WAKE_UP=y" >> SlimeVR-Tracker-nRF/prj.conf
          printf "\nCONFIG_USE_ACTIVE_TIMEOUT=y" >> SlimeVR-Tracker-nRF/prj.conf

      - name: Disable Sleep
        if: env.SLEEP == 'disabled'
        run: |
          cd zephyr-workspace
          printf "\nCONFIG_USE_IMU_WAKE_UP=n" >> SlimeVR-Tracker-nRF/prj.conf
          printf "\nCONFIG_USE_ACTIVE_TIMEOUT=n" >> SlimeVR-Tracker-nRF/prj.conf
          printf "\nCONFIG_SENSOR_LP_TIMEOUT=300000" >> SlimeVR-Tracker-nRF/prj.conf
          printf "\nCONFIG_SENSOR_USE_LOW_POWER_2=n" >> SlimeVR-Tracker-nRF/prj.conf

      - name: Enable SW0 Button
        if: env.SW0_BUTTON == 'enabled'
        run: |
          cd zephyr-workspace
          sed -i "s#^[[:space:]]*//[[:space:]]*sw0[[:space:]]*=#\t\tsw0 =#g" SlimeVR-Tracker-nRF/boards/xiao_ble.overlay

      - name: Disable SW0 Button
        if: env.SW0_BUTTON == 'disabled'
        run: |
          cd zephyr-workspace
          sed -i "s#^\([[:space:]]*\)sw0[[:space:]]*=#\1// sw0 =#g" SlimeVR-Tracker-nRF/boards/xiao_ble.overlay

      - name: Build SlimeVR-Tracker-nRF (XIAO)
        run: |
          cd zephyr-workspace
          rm -rf SlimeVR-Tracker-nRF/build
          mkdir -p SlimeVR-Tracker-nRF/build
          west build \
            --board "$BOARD" \
            --pristine=always SlimeVR-Tracker-nRF \
            --build-dir SlimeVR-Tracker-nRF/build \
            -- \
            -DNCS_TOOLCHAIN_VERSION=NONE \
            -DBOARD_ROOT=../SlimeVR-Tracker-nRF

          SRC1="SlimeVR-Tracker-nRF/build/SlimeVR-Tracker-nRF/zephyr/zephyr.${FILEFORMAT}"
          SRC2="SlimeVR-Tracker-nRF/build/zephyr/zephyr.${FILEFORMAT}"
          if   [ -f "$SRC1" ]; then SRC="$SRC1";
          elif [ -f "$SRC2" ]; then SRC="$SRC2";
          else
            SRC=$(find SlimeVR-Tracker-nRF/build -path "*/zephyr/zephyr.${FILEFORMAT}" | head -n1)
          fi
          test -n "$SRC" -a -f "$SRC" || { echo "UF2 not found"; find SlimeVR-Tracker-nRF/build -maxdepth 4 -type f | sed 's/^/  /'; exit 1; }
          mv "$SRC" "Releases/${OUTPUT_NAME}.${FILEFORMAT}"

      - name: Collect DTS (before/after) & Diff, then Package
        shell: bash
        run: |
          set -euo pipefail
          cd zephyr-workspace
          mkdir -p Releases/dts
          DTS="SlimeVR-Tracker-nRF/boards/xiao_ble.overlay"

          cp "$DTS" "Releases/dts/xiao_ble.after.overlay"

          # diff
          if [[ -f "Releases/dts/xiao_ble.before.overlay" ]]; then
            diff -u "Releases/dts/xiao_ble.before.overlay" "Releases/dts/xiao_ble.after.overlay" > "Releases/dts/xiao_ble.pins.diff" || true
          else
            echo "WARN: xiao_ble.before.overlay not found, skipping diff"
          fi

          tar -czf "Releases/${OUTPUT_NAME}_DTS.tgz" -C Releases dts
          ls -la Releases

      - name: Upload Artifact (UF2)
        uses: actions/upload-artifact@v4
        with:
          name: ${{ env.OUTPUT_NAME }}.${{ env.FILEFORMAT }}
          path: zephyr-workspace/Releases/${{ env.OUTPUT_NAME }}.${{ env.FILEFORMAT }}

      - name: Upload Artifact (DTS package)
        uses: actions/upload-artifact@v4
        with:
          name: ${{ env.OUTPUT_NAME }}_DTS.tgz
          path: zephyr-workspace/Releases/${{ env.OUTPUT_NAME }}_DTS.tgz

      - name: Create/Update Github Release
        uses: mini-bomba/create-github-release@v1.2.0
        with:
          token: ${{ secrets.GITHUB_TOKEN }}
          tag: "latest"
          prerelease: false
          name: "Latest Firmware"
          body: |
            Manual build of the SlimeNRF Tracker Firmware (XIAO BLE).
            Board: ${{ env.BOARD }}
            Pins:
              SDA=${{ env.SDA }}, SCL=${{ env.SCL }},
              PWM0=${{ env.PWM0 }}, LED=${{ env.LED }},
              INT=${{ env.INT }}, VCC=${{ env.VCC }}, CLK=${{ env.CLK }}
            Features:
              MAG=${{ env.MAGNETOMETER }}, SLEEP=${{ env.SLEEP }},
              CLOCK=${{ env.SENSOR_CLOCK }}, EXTRA=${{ env.EXTRA_ACTIONS }},
              SW0=${{ env.SW0_BUTTON }}
            DTS artifacts:
              - xiao_ble.before.overlay / xiao_ble.after.overlay
              - xiao_ble.pins.diff (before vs after)
          files: |
            zephyr-workspace/Releases/${{ env.OUTPUT_NAME }}.${{ env.FILEFORMAT }}
            zephyr-workspace/Releases/${{ env.OUTPUT_NAME }}_DTS.tgz
          clear_attachments: true
