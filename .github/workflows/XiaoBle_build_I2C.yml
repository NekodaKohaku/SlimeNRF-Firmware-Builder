name: Build XiaoBle Tracker (XIAO BLE)

on:
  workflow_dispatch:

concurrency:
  group: ${{ github.workflow }}-${{ github.ref }}
  cancel-in-progress: true

permissions:
  contents: write

jobs:
  build:
    strategy:
      fail-fast: false
      matrix:
        boards:
          - boardname: "xiao_ble/nrf52840"
            clk: "disabled"
            type: "tracker"
            extraaction: "enabled"
            fileformat: "uf2"
            filename: "SlimeNRF_Tracker_Mag_XIAO"
            magnetometer: "enabled"
            sleep: "enabled"
            sw0: "disabled"

    runs-on: ubuntu-latest

    env:
      # --- „Éî„É≥Ë®≠ÂÆö ---
      SDA: "P0.06"
      SCL: "P0.08"
      PWM0: "P0.15"
      LED:  "P0.17"
      INT:  "P0.03"
      VCC:  "P0.14"
      CLK:  "P0.28"

      # --- Ê©üËÉΩ„Çπ„Ç§„ÉÉ„ÉÅ ---
      MAGNETOMETER: "enabled"
      SLEEP:        "disabled"
      SENSOR_CLOCK: "enabled"
      EXTRA_ACTIONS: "enabled"
      SW0_BUTTON:   "disabled"

    steps:
      - name: üíª Acquire code (root)
        uses: actions/checkout@v5

      - name: üìù Put commit hash/name in env variables
        shell: bash
        run: |
          echo "GIT_HASH=$(git rev-parse --short=8 HEAD)" >> $GITHUB_ENV
          {
            echo "GIT_MESSAGE<<EOF"
            git log -1 --pretty=%B
            echo "EOF"
          } >> $GITHUB_ENV

      - name: üßπ Clean landing folder for workspace repo
        shell: bash
        run: |
          rm -rf zephyr-workspace/SlimeNRF-CI

      - name: üíª Acquire code (workspace)
        uses: actions/checkout@v5
        with:
          path: zephyr-workspace/SlimeNRF-CI

      - name: üß∞ Install Dependencies + Python venv + West
        shell: bash
        run: |
          sudo apt-get update
          sudo apt-get install -y --no-install-recommends \
            git cmake ninja-build gperf ccache dfu-util device-tree-compiler wget \
            python3-dev python3-pip python3-setuptools python3-tk python3-wheel python3-venv \
            xz-utils file make gcc gcc-multilib g++-multilib libsdl2-dev libmagic1
          python3 -m venv "$HOME/.venv"
          "$HOME/.venv/bin/python" -m pip install --upgrade pip
          "$HOME/.venv/bin/python" -m pip install west ninja
          echo "$HOME/.venv/bin" >> "$GITHUB_PATH"

      - name: ü™Å Install Zephyr SDK
        shell: bash
        run: |
          wget -q https://github.com/zephyrproject-rtos/sdk-ng/releases/download/v0.17.2/zephyr-sdk-0.17.2_linux-x86_64_minimal.tar.xz
          tar xf zephyr-sdk-0.17.2_linux-x86_64_minimal.tar.xz -C "$HOME"/
          "$HOME/zephyr-sdk-0.17.2/setup.sh" -c -t arm-zephyr-eabi

      - name: ‚ôªÔ∏è Initialize Zephyr Workspace
        shell: bash
        run: |
          cd zephyr-workspace
          rm -rf .west
          west init -l SlimeNRF-CI
          west update --narrow -o=--depth=1
          west zephyr-export

      - name: üêç Install Python Dependencies
        shell: bash
        run: |
          cd zephyr-workspace
          python -m pip install -r zephyr/scripts/requirements.txt

      - name: üîß Derive build variables (env)
        shell: bash
        run: |
          echo "FILEFORMAT=${{ matrix.boards.fileformat }}" >> $GITHUB_ENV
          echo "BOARD=${{ matrix.boards.boardname }}" >> $GITHUB_ENV
          echo "OUTPUT_NAME=${{ matrix.boards.filename }}_${GIT_HASH}" >> $GITHUB_ENV
          # ‰πüÊää matrix ÁöÑ feature ÂÄºÂØ´ÂõûÔºàrelease body Áî®ÂæóÂà∞Ôºâ
          echo "MATRIX_CLK=${{ matrix.boards.clk }}" >> $GITHUB_ENV
          echo "MATRIX_EXTRA=${{ matrix.boards.extraaction }}" >> $GITHUB_ENV
          echo "MATRIX_MAG=${{ matrix.boards.magnetometer }}" >> $GITHUB_ENV
          echo "MATRIX_SLEEP=${{ matrix.boards.sleep }}" >> $GITHUB_ENV
          echo "MATRIX_SW0=${{ matrix.boards.sw0 }}" >> $GITHUB_ENV

      - name: üóÇÔ∏è Prepare Releases folder
        shell: bash
        run: |
          cd zephyr-workspace
          rm -rf Releases
          mkdir -p Releases/dts

      - name: üì∏ Snapshot DTS BEFORE modifications
        if: ${{ matrix.boards.type == 'tracker' }}
        shell: bash
        run: |
          cd zephyr-workspace
          cp "SlimeVR-Tracker-nRF/boards/xiao_ble.overlay" "Releases/dts/xiao_ble.before.overlay" || true
          cp "SlimeVR-Tracker-nRF/boards/xiao_ble_nrf52840_sense.overlay" "Releases/dts/xiao_ble_sense.before.overlay" || true

      - name: ‚úçÔ∏è Apply pin mapping to xiao_ble.overlay
        if: ${{ matrix.boards.type == 'tracker' }}
        shell: bash
        run: |
          set -euo pipefail
          cd zephyr-workspace
          python - <<'PY'
          import os, re, pathlib, sys
          p = pathlib.Path("SlimeVR-Tracker-nRF/boards/xiao_ble.overlay")
          s = p.read_text()

          def parse_pin(v: str):
            v = v.strip().upper().replace('P','')
            if '.' in v: port, pin = v.split('.',1)
            else:        port, pin = ('0', v)
            port, pin = int(port), int(pin)
            if port not in (0,1): sys.exit(f"Invalid port P{port}")
            if port==1 and not (0 <= pin <= 15): sys.exit("Port 1 supports only 0..15")
            if not (0 <= pin <= 31): sys.exit("Pin must be 0..31")
            return port, pin

          env = os.environ
          SDA  = parse_pin(env["SDA"])
          SCL  = parse_pin(env["SCL"])
          PWM0 = parse_pin(env["PWM0"])
          LED  = parse_pin(env["LED"])
          INT0 = parse_pin(env["INT"])
          VCC  = parse_pin(env["VCC"])
          CLK  = parse_pin(env["CLK"])

          # ÊõøÊèõ i2c1_default / i2c1_sleep ÁöÑ psels
          def sub_state(src, state, sda, scl):
            pat = re.compile(rf"(&{state}\s*\{{\s*group1\s*\{{)(.*?)(\}}\s*\}})", re.S)
            def repl(m):
              head, body, tail = m.groups()
              line = f"psels = <NRF_PSEL(TWIM_SDA, {sda[0]}, {sda[1]})>, <NRF_PSEL(TWIM_SCL, {scl[0]}, {scl[1]})>;"
              if re.search(r"\bpsels\s*=", body):
                body = re.sub(r"psels\s*=.*?;", line, body, flags=re.S)
              else:
                body = f"\n\t\t{line}\n" + body
              return head + body + tail
            return pat.sub(repl, src)

          s = sub_state(s, "i2c1_default", SDA, SCL)
          s = sub_state(s, "i2c1_sleep",   SDA, SCL)

          rx = re.compile(r"(NRF_PSEL\s*\(\s*PWM_OUT0\s*,\s*)[01]\s*,\s*\d+(\s*\))")
          s  = rx.sub(lambda m: f"{m.group(1)}{PWM0[0]}, {PWM0[1]}{m.group(2)}", s)

          def ensure_prop(src, prop, port, pin, flags_text):
            if re.search(rf"\b{prop}\s*=", src):
              rx = re.compile(rf"({prop}\s*=\s*<\s*&gpio)[01]\s+\d+([^>]*>;\s*)")
              return rx.sub(lambda m: f"{m.group(1)}{port} {pin}{flags_text}{m.group(2)}", src)
            # ÊèíÂÖ•Âà∞ zephyr,user ÂÖß
            uz = re.compile(r"(zephyr,user\s*\{)(.*?)(\n\t*\};)", re.S)
            def add(m):
              return f"{m.group(1)}{m.group(2)}\n\t\t{prop} = <&gpio{port} {pin}{flags_text}>;{m.group(3)}"
            return uz.sub(add, src)
          s = ensure_prop(s, "led-gpios",  LED[0], LED[1],  " (GPIO_OPEN_DRAIN|GPIO_ACTIVE_LOW)")
          s = ensure_prop(s, "int0-gpios", INT0[0], INT0[1], " 0")
          s = ensure_prop(s, "vcc-gpios",  VCC[0], VCC[1],  " 0")

          s = re.sub(r"(^\s*//\s*clk-gpios\s*=\s*<\s*&gpio)[01]\s+\d+([^>]*>;\s*)",
                     lambda m: f"{m.group(1)}{CLK[0]} {CLK[1]}{m.group(2)}", s, flags=re.M)
          s = re.sub(r"(^\s*clk-gpios\s*=\s*<\s*&gpio)[01]\s+\d+([^>]*>;\s*)",
                     lambda m: f"{m.group(1)}{CLK[0]} {CLK[1]}{m.group(2)}", s, flags=re.M)

          p.write_text(s)
          print("xiao_ble.overlay pins updated.")
          PY
          
      - name: üöß I2C-only: neutralize SPI3 pinctrl refs to avoid #gpio-cells error
        if: ${{ matrix.boards.type == 'tracker' }}
        shell: bash
        run: |
          cd zephyr-workspace
          sed -i -E \
            's/^([[:space:]]*pinctrl-(0|1)[[:space:]]*=.*&spi2_(default|sleep).*;)/\/\/ \1/g' \
            SlimeVR-Tracker-nRF/boards/xiao_ble.overlay
          sed -n '/&spi3[[:space:]]*{/,/}/p' SlimeVR-Tracker-nRF/boards/xiao_ble.overlay | grep -q 'status = "okay";' && \
            sed -i '/&spi3[[:space:]]*{/,/}/ s/status = "okay";/status = "disabled";/' \
              SlimeVR-Tracker-nRF/boards/xiao_ble.overlay || true

      - name: üîß Disabling External Clock
        if: ${{ env.SENSOR_CLOCK == 'disabled' }}
        shell: bash
        run: |
          cd zephyr-workspace
          find='clk-gpios[ \t]='
          replace='// clk-gpios ='
          sed -i "s|$find|$replace|g" SlimeVR-Tracker-nRF/boards/xiao_ble.overlay
          sed -i "s|$find|$replace|g" SlimeVR-Tracker-nRF/boards/xiao_ble_nrf52840_sense.overlay
          printf "\nCONFIG_USE_SENSOR_CLOCK=n\n" >> SlimeVR-Tracker-nRF/prj.conf

      - name: üîß Enabling External Clock
        if: ${{ env.SENSOR_CLOCK == 'enabled' }}
        shell: bash
        run: |
          cd zephyr-workspace
          find="\/\/\sclk-gpios"
          replace="clk-gpios"
          sed -i "s/$find/$replace/g" SlimeVR-Tracker-nRF/boards/xiao_ble.overlay
          sed -i "s/$find/$replace/g" SlimeVR-Tracker-nRF/boards/xiao_ble_nrf52840_sense.overlay
          printf "\nCONFIG_USE_SENSOR_CLOCK=y\n" >> SlimeVR-Tracker-nRF/prj.conf

      - name: üîß Extra Actions
        shell: bash
        run: |
          cd zephyr-workspace
          if [[ "${EXTRA_ACTIONS}" == "enabled" ]]; then
            printf "\nCONFIG_USER_EXTRA_ACTIONS=y\n" >> SlimeVR-Tracker-nRF/prj.conf
          else
            printf "\nCONFIG_USER_EXTRA_ACTIONS=n\n" >> SlimeVR-Tracker-nRF/prj.conf
          fi

      - name: üîß Magnetometer
        shell: bash
        run: |
          cd zephyr-workspace
          if [[ "${MAGNETOMETER}" == "enabled" ]]; then
            printf "\nCONFIG_SENSOR_USE_MAG=y\n" >> SlimeVR-Tracker-nRF/prj.conf
          else
            printf "\nCONFIG_SENSOR_USE_MAG=n\n" >> SlimeVR-Tracker-nRF/prj.conf
          fi

      - name: üîß Sleep
        shell: bash
        run: |
          cd zephyr-workspace
          if [[ "${SLEEP}" == "enabled" ]]; then
            printf "\nCONFIG_USE_IMU_WAKE_UP=y\nCONFIG_USE_ACTIVE_TIMEOUT=y\n" >> SlimeVR-Tracker-nRF/prj.conf
          else
            {
              printf "\nCONFIG_USE_IMU_WAKE_UP=n\n"
              printf "CONFIG_USE_ACTIVE_TIMEOUT=n\n"
              printf "CONFIG_SENSOR_LP_TIMEOUT=300000\n"
              printf "CONFIG_SENSOR_USE_LOW_POWER_2=n\n"
            } >> SlimeVR-Tracker-nRF/prj.conf
          fi

      - name: üîß SW0 Button
        shell: bash
        run: |
          cd zephyr-workspace
          if [[ "${SW0_BUTTON}" == "enabled" ]]; then
            sed -i "s#^[[:space:]]*//[[:space:]]*sw0[[:space:]]*=#\t\tsw0 =#g" SlimeVR-Tracker-nRF/boards/xiao_ble.overlay
            sed -i "s#^[[:space:]]*//[[:space:]]*sw0[[:space:]]*=#\t\tsw0 =#g" SlimeVR-Tracker-nRF/boards/xiao_ble_nrf52840_sense.overlay
          else
            sed -i "s#^\([[:space:]]*\)sw0[[:space:]]*=#\1// sw0 =#g" SlimeVR-Tracker-nRF/boards/xiao_ble.overlay
            sed -i "s#^\([[:space:]]*\)sw0[[:space:]]*=#\1// sw0 =#g" SlimeVR-Tracker-nRF/boards/xiao_ble_nrf52840_sense.overlay
          fi

      - name: üî® Build SlimeVR-Tracker-nRF - ${{ matrix.boards.boardname }}
        if: ${{ matrix.boards.type == 'tracker' }}
        shell: bash
        run: |
          cd zephyr-workspace
          rm -rf SlimeVR-Tracker-nRF/build
          mkdir -p SlimeVR-Tracker-nRF/build
          west build \
            --board "${BOARD}" \
            --pristine=always SlimeVR-Tracker-nRF \
            --build-dir SlimeVR-Tracker-nRF/build \
            -- \
            -DNCS_TOOLCHAIN_VERSION=NONE \
            -DBOARD_ROOT=../SlimeVR-Tracker-nRF
          mv "SlimeVR-Tracker-nRF/build/SlimeVR-Tracker-nRF/zephyr/zephyr.${FILEFORMAT}" \
             "Releases/${OUTPUT_NAME}.${FILEFORMAT}"

      - name: Collect DTS (before/after) & Diff, then Package
        shell: bash
        run: |
          set -euo pipefail
          cd zephyr-workspace

          DTS_MAIN="SlimeVR-Tracker-nRF/boards/xiao_ble.overlay"
          DTS_SENSE="SlimeVR-Tracker-nRF/boards/xiao_ble_nrf52840_sense.overlay"

          cp "$DTS_MAIN"  "Releases/dts/xiao_ble.after.overlay" || true
          cp "$DTS_SENSE" "Releases/dts/xiao_ble_sense.after.overlay" || true

          if [[ -f "Releases/dts/xiao_ble.before.overlay" && -f "Releases/dts/xiao_ble.after.overlay" ]]; then
            diff -u "Releases/dts/xiao_ble.before.overlay" "Releases/dts/xiao_ble.after.overlay" > "Releases/dts/xiao_ble.pins.diff" || true
          else
            echo "WARN: xiao_ble.before.overlay not found, skipping diff"
          fi

          if [[ -f "SlimeVR-Tracker-nRF/build/zephyr/zephyr.dts" ]]; then
            cp "SlimeVR-Tracker-nRF/build/zephyr/zephyr.dts" "Releases/dts/zephyr.final.dts"
          fi

          tar -czf "Releases/${OUTPUT_NAME}_DTS.tgz" -C Releases dts
          ls -la Releases

      - name: Upload Artifact (UF2)
        uses: actions/upload-artifact@v4
        with:
          name: ${{ env.OUTPUT_NAME }}.${{ env.FILEFORMAT }}
          path: zephyr-workspace/Releases/${{ env.OUTPUT_NAME }}.${{ env.FILEFORMAT }}

      - name: Upload Artifact (DTS package)
        uses: actions/upload-artifact@v4
        with:
          name: ${{ env.OUTPUT_NAME }}_DTS.tgz
          path: zephyr-workspace/Releases/${{ env.OUTPUT_NAME }}_DTS.tgz

      - name: Create/Update Github Release
        uses: mini-bomba/create-github-release@v1.2.0
        with:
          token: ${{ secrets.GITHUB_TOKEN }}
          tag: "latest"
          prerelease: false
          name: "Latest Firmware"
          body: |
            Manual build of the SlimeNRF Tracker Firmware (XIAO BLE).

            Commit: ${{ env.GIT_HASH }}
            Message:
            ${{ env.GIT_MESSAGE }}

            Board: ${{ env.BOARD }}
            Pins:
              SDA=${{ env.SDA }}, SCL=${{ env.SCL }},
              PWM0=${{ env.PWM0 }}, LED=${{ env.LED }},
              INT=${{ env.INT }}, VCC=${{ env.VCC }}, CLK=${{ env.CLK }}

            Features:
              MAG=${{ env.MAGNETOMETER }}, SLEEP=${{ env.SLEEP }},
              CLOCK=${{ env.SENSOR_CLOCK }}, EXTRA=${{ env.EXTRA_ACTIONS }},
              SW0=${{ env.SW0_BUTTON }}

            (Matrix defaults at build: CLK=${{ env.MATRIX_CLK }}, EXTRA=${{ env.MATRIX_EXTRA }}, MAG=${{ env.MATRIX_MAG }}, SLEEP=${{ env.MATRIX_SLEEP }}, SW0=${{ env.MATRIX_SW0 }})

            DTS artifacts:
              - xiao_ble.before.overlay / xiao_ble.after.overlay
              - xiao_ble.pins.diff (before vs after)
              - zephyr.final.dts (if present)
          files: |
            zephyr-workspace/Releases/${{ env.OUTPUT_NAME }}.${{ env.FILEFORMAT }}
            zephyr-workspace/Releases/${{ env.OUTPUT_NAME }}_DTS.tgz
          clear_attachments: true
